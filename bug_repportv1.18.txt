# 🐞 Bug Report & Improvement Summary

This document outlines identified issues and improvement suggestions for the stock management system project.

---

## 📁 Makefile

- **Object File Clutter**  
  Object files (`.o`) are generated in the root directory.  
  ✅ Suggestion: Redirect them to the `build/` directory for cleaner structure.

- **Missing `.PHONY` Declarations**  
  Targets like `all`, `clean`, `run`, etc., should be declared phony to avoid conflicts with files of the same name.

- **No Dependency Tracking**  
  Header changes won’t trigger recompilation of dependent `.c` files.  
  ✅ Suggestion: Use `-MMD` and `-include` to track dependencies.

- **Incomplete Cleanup**  
  `.d` files (if added) are not removed by `make clean`.

---

## 🗃️ database.c

- **Resource Leak on Initialization Failure**  
  If table creation fails, the database remains open.  
  ✅ Suggestion: Call `sqlite3_close()` on failure.

- **Unsafe String Binding**  
  `SQLITE_STATIC` is used with potentially non-static strings.  
  ✅ Suggestion: Use `SQLITE_TRANSIENT` for safety.

- **Limited Error Feedback**  
  Some functions return `-1` without printing the SQLite error message.  
  ✅ Suggestion: Use `sqlite3_errmsg()` for better diagnostics.

- **No NULL Check for `db`**  
  Defensive programming could prevent crashes if `db` is NULL.

---

## 📦 produit.c

- **Redundant Variable**  
  In `supprimer_produit_interactif`, `p.id` is copied unnecessarily.

- **No Deletion Confirmation**  
  Deleting a product happens without user confirmation.  
  ✅ Suggestion: Prompt the user before deletion.

- **Unclear Duplicate Product Message**  
  The message when a product already exists is vague.  
  ✅ Suggestion: Make it more informative and actionable.

- **No NULL Check for `db`**  
  Same as in `database.c`.

---

## 🧰 utils.c

- **Negative Numbers Rejected**  
  `lire_entier()` and `lire_flottant()` do not accept negative values.  
  ✅ Suggestion: Allow a leading `-` character.

- **Fragile Float Validation**  
  Manual character checks are error-prone.  
  ✅ Suggestion: Use `strtof()` with `errno` and `endptr` for robust parsing.

- **No Retry or Error Prompt**  
  Invalid input forces the user to restart the operation.  
  ✅ Suggestion: Add retry logic or clearer error messages.

---

## 🧱 sqlite3.c

- **No Bugs Found** (assumed unmodified from the official SQLite repo)

✅ Recommendations:
- Compile with `-w` to suppress warnings.
- Ensure `sqlite3.h` matches the version of `sqlite3.c`.
- Avoid modifying the file directly.

---

## ✅ Next Steps

- [ ] Refactor Makefile for object placement and dependency tracking  
- [ ] Improve input validation and error handling in `utils.c`  
- [ ] Add confirmation prompts and clearer messages in `produit.c`  
- [ ] Enhance error reporting in `database.c`  
- [ ] Optionally add unit tests for database operations

---

_Last reviewed: 2025-06-28_
